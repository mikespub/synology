{
    "SYNO.Storage.CGI.BtrfsDedupe": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get_status",
                "manual_dedupe",
                "dry_run",
                "get_volume_info",
                "set_volume_schedule_config",
                "set_schedule_plan",
                "get_schedule_plan",
                "check_quota",
                "rescan_quota_v2",
                "set_reclaim_type",
                "stop"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Cache.Protection": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get_config",
                "update_config",
                "enable_passive",
                "disable_passive",
                "get_status",
                "get_status_all"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Check": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "do_disk_scan",
                "remove_ask_for_remap_scan",
                "remove_ask_for_wcache_lost_data_scrubbing",
                "remove_ask_for_fsck_scan",
                "remove_ask_for_fsck",
                "is_data_scrubbing",
                "do_data_scrubbing",
                "ignore_data_scrubbing",
                "is_building",
                "reboot_after_rebuild",
                "should_ask_for_fsck_scan"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.DetectedPool": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "assemble",
                "remove"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.DualEnclosure": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "load"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Enclosure": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "load",
                "exp_fw_update",
                "exp_fw_fail_get",
                "exp_fw_update_list_get",
                "exp_fw_update_status_get",
                "exp_fw_update_cancel_notify",
                "is_exp_connected",
                "sha_exp_fw_update",
                "sha_exp_fw_fail_get",
                "sha_exp_fw_update_list_get",
                "sha_exp_fw_update_status_get",
                "sha_exp_fw_update_cancel_notify",
                "sha_is_exp_connected"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.EncryptionKeyVault": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "enable",
                "disable",
                "verify_passwd",
                "reset",
                "repair",
                "set_autounlock_key",
                "get_info",
                "pack_for_ma",
                "set_for_ma",
                "sync_to_passive"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.EncryptionKeyVault.UnlockMode": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get_passwd_wrong_record",
                "enter_passwd",
                "skip_passwd"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Flashcache": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "check_system_raid",
                "configure",
                "shared_cache_config_get",
                "shared_cache_config_set",
                "check_can_create",
                "is_redundancy_degraded",
                "estimate_raid_size",
                "estimate_mem_size",
                "check_volume_abnormal_cant_create_cache",
                "remove",
                "remove_cancel",
                "repair",
                "add_drive",
                "create_feasibility_hard_check",
                "enable",
                "check_can_lock_space",
                "advisor_poll",
                "check_pin_metadata_and_rec_size",
                "advisor_history_get",
                "advisor_start",
                "advisor_stop",
                "replace"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.HddMan": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get",
                "set",
                "send_health_report",
                "set_all_nodes"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.KMIP": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get",
                "set",
                "erase_all_data",
                "transfer_data",
                "get_key_list",
                "delete_key",
                "test_conn",
                "get_server_hostname",
                "check_loop",
                "get_version_info",
                "import_cert",
                "list_cert",
                "set_cert",
                "remove_cert",
                "renew_cert",
                "import_server_ca"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Pool": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "pre_delete_check",
                "cancel_data_scrubbing",
                "pause_data_scrubbing",
                "create",
                "data_scrubbing",
                "data_scrubbing_plain",
                "delete",
                "deactivate",
                "edit_desc",
                "get_setting",
                "set_setting",
                "enum_resource",
                "estimate_size",
                "expand_by_add_disk",
                "expand_unallocated",
                "expand_unfinished_shr",
                "migrate",
                "repair",
                "replace",
                "check_fast_repair",
                "is_disk_detected_old_info",
                "reassemble",
                "remove_missing_pool",
                "update_raid_sb_cache",
                "remove_raid_sb_cache"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Scrubbing": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get_state"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Smart": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get_health_info",
                "get_smart_info",
                "secure_erase",
                "list",
                "get_latest_online_drive_db_info",
                "update_smartctl_db",
                "smart_warning_set",
                "smart_warning_get"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Smart.Scheduler": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get",
                "set",
                "list",
                "delete",
                "run",
                "change_state"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Spare": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "add",
                "edit",
                "delete",
                "potential_spares_dump",
                "list"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Spare.Conf": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "get",
                "set"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Storage": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "load_info",
                "load_bad_disks",
                "login_check",
                "repair_sys_partition",
                "repair_system_partition",
                "repair_system_partition_list",
                "repair_rootbackup",
                "set_schedule_plan",
                "get_schedule_plan",
                "set_resync_speed",
                "get_resync_speed",
                "set_data_scrubbing_schedule",
                "set_data_scrubbing_schedule_status",
                "set_fast_repair_config",
                "get_fast_repair_config",
                "set_auto_repair_config",
                "get_auto_repair_config",
                "get_sche_task_list",
                "reload_raid_config",
                "get_space_reclaim_status",
                "get_space_reclaim_schedule",
                "set_space_reclaim_schedule",
                "delay_space_reclaim",
                "delete_space_reclaim_background_task",
                "get_mib_collector_result"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.TaipeiEnclosure": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "load"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Volume": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "pre_delete_check",
                "cancel_data_scrubbing",
                "pause_data_scrubbing",
                "cancel_defrag",
                "cancel_fs_scrubbing",
                "create_on_existing_pool",
                "create",
                "data_scrubbing",
                "defrag",
                "delete",
                "deploy_unused",
                "enum_resource",
                "estimate_size",
                "expand_by_add_disk",
                "expand_pool_child",
                "expand_unallocated",
                "expand_unfinished_shr",
                "convert_shr_to_pool",
                "convert_shr_without_drive",
                "fs_scrubbing",
                "migrate",
                "next_trim_time_get",
                "repair",
                "ssd_trim_get",
                "ssd_trim_save",
                "vol_extent_size_get",
                "vol_extent_size_set",
                "transfer_to_rw",
                "get_space_usage",
                "enable_space_usage",
                "disable_space_usage",
                "set_setting",
                "failover_keep_rw",
                "get_dump_volumes",
                "unlock_by_vault",
                "get_recovery_key",
                "export_recovery_key",
                "fs_info_on_pool_meta_set",
                "fs_info_on_pool_meta_update",
                "change_recovery_key",
                "set_dek",
                "clean_dek",
                "unlock_by_recovery_key",
                "get_recovery_key_info"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Volume.Installer": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "quick_create_precheck",
                "quick_create"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    },
    "SYNO.Storage.CGI.Volume.OfflineOp": {
        "lib": "StorageManager/libStorage.so",
        "maxVersion": 1,
        "methods": {
            "1": [
                "pre_estimate",
                "execute",
                "stop"
            ]
        },
        "minVersion": 1,
        "path": "entry.cgi",
        "requestFormat": "JSON"
    }
}